# KokoroTTS API - CPU Optimized Build
# Smaller, faster build for CPU-only deployments
# Optimized for production CPU workloads

FROM python:3.12-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install minimal system dependencies for CPU-only
RUN apt-get update && apt-get install -y \
    # Essential build tools (minimal set)
    build-essential \
    pkg-config \
    # Audio processing (required for TTS)
    ffmpeg \
    libsndfile1 \
    espeak-ng \
    espeak-ng-data \
    # System utilities (minimal)
    curl \
    git \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y

# Create non-root user
RUN groupadd -r kokorotts && useradd -r -g kokorotts -s /bin/bash -m kokorotts

# Set work directory
WORKDIR /app

# ================================
# Stage 2: Dependencies (CPU optimized)
# ================================
FROM base as dependencies

# Copy requirements
COPY requirements.txt .

# Create CPU-optimized requirements by filtering out GPU-specific and platform-incompatible packages
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    # Filter out GPU-specific and platform-incompatible packages
    grep -v "nvidia-" requirements.txt | grep -v "triton" > requirements_cpu.txt && \
    # Install CPU-only PyTorch (smaller, faster download)
    pip install --no-cache-dir torch torchaudio --index-url https://download.pytorch.org/whl/cpu && \
    # Install other dependencies (excluding GPU packages and triton)
    pip install --no-cache-dir -r requirements_cpu.txt

# ================================
# Stage 3: Application
# ================================
FROM dependencies as application

# Copy application code
COPY app/ ./app/
COPY static/ ./static/
COPY LICENSE ./

# Create directories and set permissions
RUN mkdir -p /app/logs /app/cache /app/models /app/cache/huggingface /app/cache/transformers && \
    chown -R kokorotts:kokorotts /app && \
    chown -R kokorotts:kokorotts /home/kokorotts

# ================================
# Stage 4: Runtime (Final)
# ================================
FROM application as runtime

# Copy helper scripts
COPY docker/healthcheck.py ./docker/
COPY docker/entrypoint.sh ./docker/

# Make scripts executable
RUN chmod +x ./docker/entrypoint.sh ./docker/healthcheck.py

# Switch to non-root user
USER kokorotts

# Expose port
EXPOSE 8000

# CPU-optimized health check (faster interval for CPU)
HEALTHCHECK --interval=20s --timeout=5s --start-period=45s --retries=3 \
    CMD python docker/healthcheck.py

# CPU-optimized environment variables for KokoroTTS API
ENV \
    # Application settings (CPU optimized)
    ENVIRONMENT=production \
    HOST=0.0.0.0 \
    PORT=8000 \
    WORKERS=2 \
    LOG_LEVEL=info \
    DEBUG=false \
    RELOAD=false \
    # API configuration
    API_TITLE="Kokoro TTS API (CPU)" \
    API_VERSION="1.0.0" \
    API_DESCRIPTION="CPU-optimized OpenAI-compatible TTS API using Kokoro model" \
    API_DOCS_URL="/docs" \
    API_REDOC_URL="/redoc" \
    API_STATIC_DIRECTORY="static" \
    API_SUPPORTED_FORMATS="wav,mp3,flac,ogg,opus" \
    API_MIN_SPEED=0.25 \
    API_MAX_SPEED=4.0 \
    API_DEFAULT_LANGUAGE="a" \
    API_DEFAULT_VOICE="af_heart" \
    API_DEFAULT_FORMAT="mp3" \
    API_VOICE_CACHE_DURATION=3600 \
    API_CORS_ORIGINS="*" \
    API_CORS_METHODS="*" \
    API_CORS_HEADERS="*" \
    API_ALLOW_CREDENTIALS=true \
    # TTS Engine configuration (CPU optimized)
    KOKORO_DEVICE="cpu" \
    KOKORO_SAMPLE_RATE=24000 \
    KOKORO_DEFAULT_CHUNK_SIZE=600 \
    KOKORO_MAX_CHUNK_SIZE=800 \
    KOKORO_STREAMING_CHUNK_SIZE=600 \
    KOKORO_MP3_BITRATE="128k" \
    KOKORO_OPUS_CODEC="libopus" \
    KOKORO_MEMORY_LIMIT_MB=768 \
    KOKORO_BATCH_SIZE=3 \
    KOKORO_CACHE_DIR=/app/cache \
    KOKORO_MODEL_DIR=/app/models \
    KOKORO_REPO_ID="hexgrad/Kokoro-82M" \
    # Security configuration
    SECURITY_API_KEY_ENABLED=false \
    SECURITY_RATE_LIMIT_ENABLED=false \
    SECURITY_RATE_LIMIT_PER_MINUTE=60 \
    SECURITY_RATE_LIMIT_BURST=10 \
    # Monitoring configuration
    MONITORING_HEALTH_CHECK_ENABLED=true \
    MONITORING_HEALTH_CHECK_PATH="/health" \
    MONITORING_METRICS_ENABLED=true \
    MONITORING_METRICS_PATH="/metrics" \
    MONITORING_LOG_FORMAT="json" \
    MONITORING_SENTRY_ENVIRONMENT="production" \
    # CPU optimization settings
    OMP_NUM_THREADS=2 \
    MKL_NUM_THREADS=2 \
    TORCH_NUM_THREADS=2 \
    PYTHONMALLOC=malloc \
    MALLOC_ARENA_MAX=2 \
    # System paths and cache
    HOME=/home/kokorotts \
    HF_HOME=/app/cache/huggingface \
    TRANSFORMERS_CACHE=/app/cache/transformers

# Use entrypoint script
ENTRYPOINT ["./docker/entrypoint.sh"]

# Default command optimized for CPU
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]

# Build-time labels
LABEL maintainer="KokoroTTS API" \
      description="CPU-optimized KokoroTTS API for production CPU workloads" \
      version="1.0.0-cpu" \
      variant="cpu" \
      org.opencontainers.image.title="KokoroTTS API (CPU)" \
      org.opencontainers.image.description="CPU-optimized FastAPI wrapper for KokoroTTS model" \
      org.opencontainers.image.url="https://github.com/MajesticFelix/kokorotts-api" \
      org.opencontainers.image.source="https://github.com/MajesticFelix/kokorotts-api" \
      org.opencontainers.image.vendor="KokoroTTS" \
      org.opencontainers.image.licenses="Apache-2.0"